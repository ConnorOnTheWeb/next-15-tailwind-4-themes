import type { Metadata, Viewport } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { ThemeProvider } from "next-themes";
import { ThemeSelect } from "../components/theme-select";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
  authors: [{ name: "Connor", url: "https://connorontheweb.com" }],
  creator: 'Connor',
  publisher: 'ConnorOnTheWeb',
  metadataBase: new URL('https://example.com'),
  alternates: {
    canonical: '/',
    types: {
      'application/rss+xml': 'https://nextjs.org/rss',
    },
  },
  openGraph: {
    title: "Create Next App",
    description: "Description",
    url: "/",
    siteName: "Sitename",
    locale: 'en_US',
    type: "website",
  },
  twitter: {
    card: 'summary_large_image',
    title: 'Next.js',
    description: 'The React Framework for the Web',
    siteId: '1467726470533754880',
    creator: '@nextjs',
    creatorId: '1467726470533754880',
    images: ['https://nextjs.org/og.png'], // Must be an absolute URL
  },
  verification: {
    google: 'google',
    yandex: 'yandex',
    yahoo: 'yahoo',
    other: {
      me: ['my-email', 'my-link'],
    },
  },
  appLinks: {
    ios: {
      url: 'https://nextjs.org/ios',
      app_store_id: 'app_store_id',
    },
    android: {
      package: 'com.example.android/package',
      app_name: 'app_name_android',
    },
    web: {
      url: 'https://nextjs.org/web',
      should_fallback: true,
    },
  },
  robots: {
    index: true,
    follow: true,
    googleBot: {
      index: true,
      follow: true,
    },
  },
  icons: {
    icon: [
      {url: '/favicon.ico'}
    ],
    other: [{
      rel: 'apple-touch-icon',
      url: '/images/apple-touch-icon.png',
    }]
  }
};
 
export const viewport: Viewport = {
  themeColor: '#0a0a0a',
  width: 'device-width',
  initialScale: 1,
}


export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <ThemeProvider>
          <div className="min-h-screen bg-white dark:bg-gray-900">
            <nav className="absolute top-0 right-0 p-4">
              <ThemeSelect />
            </nav>
            {children}
          </div>
        </ThemeProvider>
      </body>
    </html>
  );
}
